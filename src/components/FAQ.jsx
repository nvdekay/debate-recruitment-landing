import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useIntersectionObserver } from "../hooks/useIntersectionObserver";
// üåü IMPORT ICONS FONT AWESOME (Gi·∫£ ƒë·ªãnh ƒë√£ c√†i ƒë·∫∑t: npm install react-icons) üåü
import { FaHatWizard, FaInfinity, FaRegStar, FaFeatherPointed, FaBookOpen } from "react-icons/fa6";

const FAQ = () => {
    const [openIndex, setOpenIndex] = useState(null);
    const [elementRef, isVisible] = useIntersectionObserver({
        threshold: 0.1,
    });

    // üåü Icons Font Awesome 6 ƒë∆∞·ª£c s·ª≠ d·ª•ng (v√≠ d·ª•) üåü
    const faqData = [
        {
            question: "Ai c√≥ th·ªÉ tham gia Debate Championship 2026?",
            answer:
                "Cu·ªôc thi m·ªü r·ªông cho t·∫•t c·∫£ sinh vi√™n ƒëang h·ªçc t·∫°i c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc, cao ƒë·∫≥ng tr√™n to√†n qu·ªëc. Kh√¥ng y√™u c·∫ßu kinh nghi·ªám tranh lu·∫≠n tr∆∞·ªõc ƒë√≥, ch·ªâ c·∫ßn c√≥ ƒëam m√™ h·ªçc h·ªèi v√† th·ªÉ hi·ªán quan ƒëi·ªÉm c·ªßa m√¨nh m·ªôt c√°ch thuy·∫øt ph·ª•c.",
            symbol: <FaHatWizard />, // The Fool -> Wizard Hat (Kh·ªüi ƒë·∫ßu/Ti·ªÅm nƒÉng)
            tarotName: "THE FOOL",
        },
        {
            question: "Th·ªÉ th·ª©c thi ƒë·∫•u nh∆∞ th·∫ø n√†o?",
            answer:
                "Cu·ªôc thi g·ªìm 3 v√≤ng ch√≠nh: V√≤ng ƒë∆°n (20/10 - 1/11) v·ªõi b√†i thi tr·ª±c tuy·∫øn, V√≤ng ph·ªèng v·∫•n (3/11 - 6/11) ƒë√°nh gi√° k·ªπ nƒÉng tranh lu·∫≠n tr·ª±c ti·∫øp, v√† Chung k·∫øt v·ªõi c√°c ƒë·ªôi xu·∫•t s·∫Øc nh·∫•t tranh t√†i t·∫°i s·ª± ki·ªán l·ªõn.",
            symbol: <FaInfinity />, // Wheel of Fortune -> Infinity (Chu k·ª≥/V√≤ng quay)
            tarotName: "WHEEL OF FORTUNE",
        },
        {
            question: "Gi·∫£i th∆∞·ªüng v√† quy·ªÅn l·ª£i khi tham gia?",
            answer:
                "Ngo√†i c√°c gi·∫£i th∆∞·ªüng gi√° tr·ªã l√™n ƒë·∫øn h√†ng ch·ª•c tri·ªáu ƒë·ªìng, ng∆∞·ªùi tham gia c√≤n c√≥ c∆° h·ªôi k·∫øt n·ªëi v·ªõi c√°c chuy√™n gia, nh·∫≠n ch·ª©ng ch·ªâ tham gia, v√† m·ªü r·ªông m·∫°ng l∆∞·ªõi quan h·ªá trong c·ªông ƒë·ªìng tranh lu·∫≠n h·ªçc thu·∫≠t.",
            symbol: <FaRegStar />, // The Star -> Star (Hy v·ªçng/Th√†nh c√¥ng)
            tarotName: "THE STAR",
        },
        {
            question: "L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω tham gia?",
            answer:
                "B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω tr·ª±c tuy·∫øn th√¥ng qua website ch√≠nh th·ª©c ho·∫∑c li√™n h·ªá qua email debate.fpt@gmail.com. H·∫°n ch√≥t n·ªôp h·ªì s∆° l√† 1/11/2025. H·ªì s∆° bao g·ªìm th√¥ng tin c√° nh√¢n, CV v√† m·ªôt b√†i essay ng·∫Øn v·ªÅ ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
            symbol: <FaFeatherPointed />, // The Magician -> Quill/Feather (Th·ª±c hi·ªán/Vi·∫øt l√°ch)
            tarotName: "THE MAGICIAN",
        },
        {
            question: "C·∫ßn chu·∫©n b·ªã g√¨ ƒë·ªÉ tham gia hi·ªáu qu·∫£?",
            answer:
                "B·∫°n n√™n r√®n luy·ªán k·ªπ nƒÉng di·ªÖn ƒë·∫°t, t√¨m hi·ªÉu v·ªÅ c√°c ch·ªß ƒë·ªÅ x√£ h·ªôi th·ªùi s·ª±, v√† luy·ªán t·∫≠p t∆∞ duy ph·∫£n bi·ªán. Ch√∫ng t√¥i c≈©ng s·∫Ω cung c·∫•p t√†i li·ªáu h∆∞·ªõng d·∫´n v√† t·ªï ch·ª©c c√°c bu·ªïi workshop chu·∫©n b·ªã cho th√≠ sinh.",
            symbol: <FaBookOpen />, // The Hermit -> Open Book (Kh√¥n ngoan/H∆∞·ªõng d·∫´n)
            tarotName: "THE HERMIT",
        },
    ];

    const toggleAccordion = (index) => {
        setOpenIndex(openIndex === index ? null : index);
    };

    const fadeUp = {
        hidden: { opacity: 0, y: 40 },
        visible: { opacity: 1, y: 0 },
    };

    // Gi·ªØ Spring animation cho s·ª± m∆∞·ª£t m√†
    const expandVariants = {
        hidden: { height: 0, opacity: 0, scaleY: 0.8 },
        visible: {
            height: "auto",
            opacity: 1,
            scaleY: 1,
            transition: {
                type: "spring",
                stiffness: 400, // Gi·∫£m stiffness ƒë·ªÉ m∆∞·ª£t h∆°n
                damping: 30,    // Gi·∫£m damping ƒë·ªÉ c√≥ ƒë·ªô n·∫£y tinh t·∫ø
                duration: 0.5,
            },
        },
        exit: {
            height: 0,
            opacity: 0,
            scaleY: 0.8,
            transition: { duration: 0.3, ease: "easeInOut" },
        },
    };

    return (
        <section ref={elementRef} className="py-40 relative overflow-hidden">

            <div className="container relative mx-auto px-4 z-10">
                {/* Title */}
                <motion.div
                    variants={fadeUp}
                    initial="hidden"
                    animate={isVisible ? "visible" : "hidden"}
                    transition={{ duration: 0.8 }}
                    className="text-center mb-16"
                >
                    <h2 className="text-4xl md:text-6xl font-extrabold mb-4 font-serif drop-shadow-lg tracking-wider 
                                   bg-gradient-to-r from-pink-500 via-purple-400 to-cyan-400 bg-clip-text text-transparent animate-holotitle">
                        GI·∫¢I M√É L√Å B√ÄI TAROT
                    </h2>
                    <p className="text-lg md:text-xl text-gray-400 max-w-2xl mx-auto italic font-light">
                        M·ªói l√° b√†i ·∫©n ch·ª©a m·ªôt th√¥ng ƒëi·ªáp ƒë·ªãnh m·ªánh v·ªÅ Debate Championship 2026...
                    </p>
                </motion.div>

                {/* FAQ Items */}
                <div className="max-w-4xl mx-auto space-y-6">
                    {faqData.map((item, index) => (
                        <motion.div
                            key={index}
                            variants={fadeUp}
                            initial="hidden"
                            animate={isVisible ? "visible" : "hidden"}
                            transition={{ duration: 0.8, delay: index * 0.1 }}
                            className="relative group"
                            whileHover={{ scale: 1.01, zIndex: 10, boxShadow: "0 0 35px rgba(255, 105, 180, 0.4)" }}
                        >
                            <div className="bg-gray-900/80 rounded-2xl overflow-hidden backdrop-blur-sm shadow-xl 
                                            border-2 border-transparent hover:border-purple-500 transition-all duration-300 animate-holoborder">

                                {/* Question Header */}
                                <motion.button
                                    onClick={() => toggleAccordion(index)}
                                    className="cursor-pointer w-full px-6 py-5 md:px-8 flex items-center justify-between text-left transition-all duration-300 group-hover:bg-purple-900/30"
                                    whileTap={{ scale: 0.98 }} // üåü Th√™m hi·ªáu ·ª©ng nh·∫•n m∆∞·ª£t m√† üåü
                                >
                                    <div className="flex items-center gap-4">
                                        {/* Icon Tarot */}
                                        <span className="text-pink-400 text-3xl drop-shadow-lg animate-pulse-slow">
                                            {item.symbol}
                                        </span>
                                        {/* Tarot Name */}
                                        <span className="text-sm font-light text-cyan-400 uppercase tracking-widest hidden sm:inline-block">
                                            ({item.tarotName})
                                        </span>
                                        {/* Question Text */}
                                        <h3 className="text-lg md:text-xl font-semibold text-white group-hover:text-pink-400 transition-colors duration-300">
                                            {item.question}
                                        </h3>
                                    </div>
                                    {/* Chevron/M≈©i t√™n xoay */}
                                    <motion.div
                                        animate={{
                                            rotate: openIndex === index ? 180 : 0,
                                        }}
                                        transition={{ duration: 0.3 }}
                                        className="text-cyan-400 text-xl font-bold drop-shadow-lg"
                                    >
                                        ‚ñº
                                    </motion.div>
                                </motion.button>

                                {/* Answer Content with AnimatePresence */}
                                <AnimatePresence initial={false}>
                                    {openIndex === index && (
                                        <motion.div
                                            variants={expandVariants}
                                            initial="hidden"
                                            animate="visible"
                                            exit="exit"
                                            className="overflow-hidden relative origin-top" // origin-top quan tr·ªçng cho scaleY
                                        >
                                            {/* Line separator */}
                                            <div className="w-[90%] mx-auto h-[1px] bg-purple-700/50"></div>

                                            <div className="px-6 md:px-8 pb-6 md:pb-8 pt-6 relative">
                                                {/* Hi·ªáu ·ª©ng Shine (√Ånh s√°ng l∆∞·ªõt qua) - M√†u Holo */}
                                                <div className="absolute inset-0 bg-gradient-to-r from-transparent via-purple-300/10 to-transparent animate-shine pointer-events-none opacity-50"></div>

                                                <p className="text-gray-300 leading-relaxed text-base md:text-lg relative z-10
                                                            before:content-['~'] before:absolute before:left-[-1.5rem] before:text-pink-400 before:text-2xl before:-top-1 before:animate-pulse">
                                                    {item.answer}
                                                </p>
                                            </div>
                                        </motion.div>
                                    )}
                                </AnimatePresence>
                            </div>
                        </motion.div>
                    ))}
                </div>
            </div>

            {/* CSS Cho hi·ªáu ·ª©ng Holo, Shine v√† Animation */}
            <style jsx global>{`
                /* Hi·ªáu ·ª©ng Shine (Gi·ªØ nguy√™n, ƒë·ªïi m√†u via) */
                @keyframes shine {
                    0% { transform: translateX(-100%); }
                    60% { transform: translateX(100%); }
                    100% { transform: translateX(100%); }
                }
                .animate-shine {
                    animation: shine 3s infinite ease-in-out;
                }
                /* Hi·ªáu ·ª©ng Pulse (Gi·ªØ nguy√™n) */
                @keyframes pulse-slow {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
                .animate-pulse-slow {
                    animation: pulse-slow 3s infinite;
                }

                /* üåü HI·ªÜU ·ª®NG HOLO VI·ªÄN (Optional: n·∫øu mu·ªën vi·ªÅn glow li√™n t·ª•c) üåü */
                @keyframes holoborder {
                    0% { border-color: #f472b6; } /* pink-400 */
                    33% { border-color: #a78bfa; } /* violet-400 */
                    66% { border-color: #22d3ee; } /* cyan-400 */
                    100% { border-color: #f472b6; }
                }
                /* D√πng border hover thay v√¨ animate-holoborder li√™n t·ª•c ƒë·ªÉ tr√°nh gi·∫≠t lag*/

                /* Font serif cho ti√™u ƒë·ªÅ ch√≠nh */
                .font-serif {
                    font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
                }
            `}</style>
        </section>
    );
};

export default FAQ;